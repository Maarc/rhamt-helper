= RHAMT Helper

RHAMT automates the following tasks:

* build of the Red Hat Application Migration Toolkit (RHAMT) Command Line Interface (CLI)
* batch analysis of several Java applications grouped in subfolders


== Usage

0. Check out the rhamt-helper
+
  $ git clone https://github.com/Maarc/rhamt-helper
  $ cd rhamt-helper

1. Copy the applications you want to analyze in sub-directories of "02__apps"
+
  $ mkdir /02__apps/new-apps-01
  $ cp my_apps/*.ear /02__apps/new-apps-01
+
TIP: For performance reasons, it is not recommended to analyze more than 1 GB of applications in a same report. Split the applications you want to analyze in several sub-directories of "02__apps".

2. [OPTIONAL] Adjust the RHAMT helper configuration
+
** 01_build_RHAMT.sh
+
*** *RHAMT_BASE_REPO*: RHAMT CLI code base. Can be updated to point to the official repository "windup" instead of the stable/patched one "Maarc".
+
** 02_analyze_apps.sh
+
*** *MAX_MEMORY*: max Java Heap used by the RHAMT CLI
*** *MAX_METASPACE_SIZE*: max Java Metasapce used by the RHAMT CLI
*** *PACKAGES*: Java packages decompiled during the analysis
+
("" -> decompiles everything, "de nl" -> decompiles de.* and nl.* packages)
*** *TARGET*: RHAMT targets

3. Execute

 $ ./run.sh

4. View the results in "02__reports"


== Performance

While analyzing an important amount of applications, it is key to:

* Increase the default ulimit on your operating system
+
TIP: This is done by "00_update_ulimit.sh" (for MacOS users) or by following the instructions on https://access.redhat.com/solutions/60746[this article] for RHEL/Fedora users.

* Set a limited list of Java packages to be decompiled (PACKAGES).

* Set a proper value for the JVM space (MAX_MEMORY, MAX_METASPACE_SIZE).


== Notes

After an initial build, you can generate new report by running:

 $ ./02__analyze_apps.sh


If you want to update an rebuild the RHAMT CLI, just execute:

 $ ./01__build_RHAMT.sh
